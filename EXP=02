#include <stdio.h>
#define MAX_SIZE 100

int arr[MAX_SIZE];
int size = 0;

void insert(int element) {
    if (size >= MAX_SIZE) {
        printf("Array is full, cannot insert.\n");
    } else {
        arr[size] = element;
        size++;
        printf("%d inserted.\n", element);
    }
}

void delete(int element) {
    int i, j;
    int found = 0;
    for (i = 0; i < size; i++) {
        if (arr[i] == element) {
            for (j = i; j < size - 1; j++) {
                arr[j] = arr[j + 1];
            }
            size--;
            found = 1;
            break;
        }
    }
    if (found == 0) {
        printf("%d not found in the array.\n", element);
    } else {
        printf("%d deleted.\n", element);
    }
}
            break;
        }
    }
    if (found) {
        for (int j = i; j < size - 1; j++) {
            arr[j] = arr[j + 1];
        }
        size--;
        printf("Deleted %d\n", element);
    } else {
        printf("Element %d not found!\n", element);
    }
}

int linear_search(int element) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == element) {
            return i;
        }
    }
    return -1;
}

int binary_search(int element) {
    int left = 0, right = size - 1, mid;
    while (left <= right) {
        mid = left + (right - left) / 2;
        if (arr[mid] == element)
            return mid;
        else if (arr[mid] < element)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}

void sort_array() {
    for (int i = 0; i < size - 1; i++) {
        for (int j = i + 1; j < size; j++) {
            if (arr[i] > arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

void display() {
    printf("Current Array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}
    printf("\n");
    int main() {
        insert(30);
        insert(10);
        insert(50);
        insert(20);
        insert(40);
        display();

        int element = 20;
        int lin_result = linear_search(element);
        if (lin_result != -1) {
            printf("Linear Search: Element %d found at index %d\n", element, lin_result);
        } else {
            printf("Element %d not found in Linear Search\n", element);
        }

        sort_array();
        int bin_result = binary_search(element);
        if (bin_result != -1) {
            printf("Binary Search: Element %d found at index %d\n", element, bin_result);
        } else {
            printf("Element %d not found in Binary Search\n", element);
        }
        return 0;
    }
        printf("Element %d not found in Binary Search\n", element);
    }
    delete(30);
    display();
    return 0;
}
